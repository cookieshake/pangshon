#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'USAGE'
Usage: run <image> [port] [--json '<json>'] [--json-file path] [--keep]

Run an image, wait for the server, then POST JSON to it.
Defaults to port 8080. Without --json/--json-file it just runs.

Examples:
  run template-python
  run template-python 3000 --json '{"name":"world","good_name":"alice"}'
  run template-python --json-file payload.json --keep
USAGE
}

if [[ ${1:-} == "-h" || ${1:-} == "--help" || $# -lt 1 ]]; then
  usage; exit 0
fi

IMAGE="$1"; shift || true

# Optional positional PORT only if next arg is not an option
HOST_PORT=""
if [[ ${1:-} != "" && ${1:0:1} != "-" ]]; then
  HOST_PORT="$1"; shift || true
fi

CONTAINER_PORT="${CONTAINER_PORT:-8080}"
JSON_PAYLOAD=""
JSON_FILE=""
KEEP=0

while [[ $# -gt 0 ]]; do
  case "$1" in
    -j|--json)
      JSON_PAYLOAD="$2"; shift 2 ;;
    -f|--json-file)
      JSON_FILE="$2"; shift 2 ;;
    --keep)
      KEEP=1; shift 1 ;;
    -h|--help)
      usage; exit 0 ;;
    *)
      echo "Unknown option: $1" >&2; usage; exit 1 ;;
  esac
done

if ! command -v docker >/dev/null 2>&1; then
  echo "docker not found. Please install and start Docker." >&2
  exit 1
fi

if [[ -n "$JSON_FILE" && -z "$JSON_PAYLOAD" ]]; then
  if [[ ! -f "$JSON_FILE" ]]; then
    echo "JSON file not found: $JSON_FILE" >&2; exit 1
  fi
  JSON_PAYLOAD="$(cat "$JSON_FILE")"
fi

# Helper to discover a free ephemeral port by letting Docker choose
start_ephemeral_container() {
  local name="$1"; shift
  docker run -d --rm --name "$name" -e PORT="$CONTAINER_PORT" -p :"$CONTAINER_PORT" "$IMAGE" >/dev/null
  # Determine the auto-assigned host port
  local mapping
  for i in {1..20}; do
    mapping=$(docker port "$name" "$CONTAINER_PORT/tcp" 2>/dev/null || true)
    if [[ -n "$mapping" ]]; then break; fi
    sleep 0.2
  done
  if [[ -z "$mapping" ]]; then
    echo "Failed to determine mapped host port" >&2
    docker logs "$name" || true
    docker stop "$name" >/dev/null 2>&1 || true
    exit 1
  fi
  # mapping formats like: 0.0.0.0:49154 or [::]:49154
  HOST_PORT="$(echo "$mapping" | awk -F: '{print $NF}' | tr -cd '0-9')"
}

# If no JSON, run server only
if [[ -z "$JSON_PAYLOAD" ]]; then
  CONTAINER_NAME="run-$(echo "$IMAGE" | tr '/:' '__')-$(date +%s)"
  if [[ -n "$HOST_PORT" ]]; then
    echo "Running '$IMAGE' on host port $HOST_PORT (container port $CONTAINER_PORT)..."
    exec docker run --rm -e PORT="$HOST_PORT" -p "$HOST_PORT":"$HOST_PORT" "$IMAGE"
  else
    echo "Running '$IMAGE' with auto-assigned port (container $CONTAINER_PORT)..."
    start_ephemeral_container "$CONTAINER_NAME"
    echo "Listening at http://localhost:$HOST_PORT"
    trap 'docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true' INT TERM EXIT
    docker logs -f "$CONTAINER_NAME"
    exit 0
  fi
fi

if ! command -v curl >/dev/null 2>&1; then
  echo "curl is required to send the POST request." >&2
  exit 1
fi

CONTAINER_NAME="run-$(echo "$IMAGE" | tr '/:' '__')-$(date +%s)"
if [[ -n "$HOST_PORT" ]]; then
  echo "Starting '$IMAGE' as container '$CONTAINER_NAME' on port $HOST_PORT..."
  docker run -d --rm --name "$CONTAINER_NAME" -e PORT="$HOST_PORT" -p "$HOST_PORT":"$HOST_PORT" "$IMAGE" >/dev/null
else
  echo "Starting '$IMAGE' as container '$CONTAINER_NAME' with auto-assigned port (container $CONTAINER_PORT)..."
  start_ephemeral_container "$CONTAINER_NAME"
fi

# Wait for server to become ready (up to 30s)
TARGET_PORT="${HOST_PORT}"
echo -n "Waiting for http://localhost:$TARGET_PORT ..."
for i in {1..60}; do
  if curl -fsS "http://localhost:$TARGET_PORT/" >/dev/null 2>&1; then
    echo " ready"; break
  fi
  echo -n "."; sleep 0.5
  if [[ $i -eq 60 ]]; then
    echo "\nServer did not become ready in time" >&2
    docker logs "$CONTAINER_NAME" || true
    docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
    exit 1
  fi
done

echo "Sending POST to / with payload: $JSON_PAYLOAD"
set +e
RESP=$(curl -sS -X POST -H 'Content-Type: application/json' --data "$JSON_PAYLOAD" "http://localhost:$TARGET_PORT/")
CODE=$?
set -e
if [[ $CODE -ne 0 ]]; then
  echo "POST request failed (exit $CODE)" >&2
  docker logs "$CONTAINER_NAME" || true
  [[ $KEEP -eq 0 ]] && docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
  exit $CODE
fi

echo "Response:" 
echo "$RESP"

if [[ $KEEP -eq 1 ]]; then
  echo "Keeping container running. Name: $CONTAINER_NAME"
  echo "View logs: docker logs -f $CONTAINER_NAME"
else
  echo "Stopping container $CONTAINER_NAME"
  docker stop "$CONTAINER_NAME" >/dev/null
fi
